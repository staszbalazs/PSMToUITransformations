package queries

import "platform:/resource/psm_meta/src/model/psm.ecore"
import "platform:/resource/ui_meta/src/model/ui.ecore"
import "platform:/resource/ui_meta/src/model/psmToUiTypeMapping.ecore"
import "platform:/resource/traceability_meta/model/traceability.ecore"

//UIBase Queries
pattern UIBaseQuery(uiBase: UIBase) {
	UIBase(uiBase);
}

//JModel Queries
pattern domainJModelQuery(jModel : JModel) {
	JModel.framework(jModel, false);
	neg find alreadyTransformed(jModel, _, _);
}

pattern domainJModelQueryForModify(jModel : JModel) {
	find alreadyTransformed(jModel, _, _);
}

//JInfo Queries
pattern JInfoQuery(jInfo : JInfo, jClass : JClass) {
	JInfo(jInfo);
	JClass.representsUser(jClass, true);
	neg find alreadyTransformed(jInfo, _, _);
}

pattern JInfoQueryForModify(jInfo : JInfo, uiInfo : UIInfo, trace : PSMToUITrace) {
	find alreadyTransformed(jInfo, uiInfo, trace);
}

//JUIFilter Queries
pattern JUIFilterQuery(jFilter : JUIFilter, uiMenuItem : UIMenuItem, componentType : UIBaseComponentType) {
	JUIMenuItem.uifilters(jMenuItem, jFilter);
	PSMToUITrace.psmElements(menuTrace, jMenuItem);
	PSMToUITrace.uiElements(menuTrace, uiMenuItem);
	
	JUIFilter.attribute(jFilter, attribute);
	PSMToUITrace.psmElements(componentTrace, attribute);
	PSMToUITrace.uiElements(componentTrace, componentType);
	
	JUIFilter.uuid(jFilter, _);
	JUIFilter.operator(jFilter, _);
	JUIFilter.value(jFilter, _);
	
	neg find alreadyTransformed(jFilter, _, _);	
}

pattern JUIFilterQueryForModify(jFilter : JUIFilter, uiFilter : UIFilter, uiMenuItem : UIMenuItem, componentType : UIBaseComponentType, trace : PSMToUITrace) {
	JUIMenuItem.uifilters(jMenuItem, jFilter);
	PSMToUITrace.psmElements(menuTrace, jMenuItem);
	PSMToUITrace.uiElements(menuTrace, uiMenuItem);
	
	JUIFilter.attribute(jFilter, attribute);
	PSMToUITrace.psmElements(componentTrace, attribute);
	PSMToUITrace.uiElements(componentTrace, componentType);
	
	find alreadyTransformed(jFilter, uiFilter, trace);
}

//JPackage Queries
pattern JPackageToUIModuleQuery(jPackage : JPackage) {
	find notOnlyContainerPackage(jPackage);
	find findUIRelevantPackages(jPackage);
	JPackage.uuid(jPackage, _);	
	JPackage.name(jPackage, _);	
	neg find alreadyTransformed(jPackage, _, _);
}

pattern JPackageToUIModuleQueryForModify(jPackage : JPackage, uiModule : UIModule, trace : PSMToUITrace) {
	PSMToUITrace.psmElements(trace, jPackage);
	PSMToUITrace.uiElements(trace, uiModule);
}


private pattern findUIRelevantPackages(jPackage : JPackage) {
	find findPackagesInLayer(jPackage, JLayer::SCREEN);
} or {
	find findPackagesInLayer(jPackage, JLayer::OPERATION);
} or {
	find findPackagesInLayer(jPackage, JLayer::ALL);
}

private pattern findPackagesInLayer(jPackage : JPackage, layer : JLayer) {
	JPackage.participates(jPackage, layer);
}

private pattern notOnlyContainerPackage(jPackage : JPackage) {
	JPackage(jPackage);
	primitives == count find primitivesInPackage(jPackage, _);
	enumerations == count find enumerationsInPackage(jPackage, _);
	relationships == count find relationshipsInPackage(jPackage, _);
	classes == count find classesInPackage(jPackage, _);
	check (
		enumerations + primitives + relationships + classes > 0
	);
}

private pattern primitivesInPackage(jPackage : JPackage, jPrimitive : JPrimitive) {
	JPackage.primitives(jPackage, jPrimitive);
}

private pattern enumerationsInPackage(jPackage : JPackage, jEnumeration : JEnumeration) {
	JPackage.enumerations(jPackage, jEnumeration);
}

private pattern relationshipsInPackage(jPackage : JPackage, jRelationship : JRelationship) {
	JPackage.relationships(jPackage, jRelationship);
}

private pattern classesInPackage(jPackage : JPackage, jClass : JClass) {
	JPackage.classes(jPackage, jClass);
}


//UIClass Queries
pattern findDescendantsForClass(uiClass : UIClass, descendant : UIClass) {
	UIClass.^super+(descendant, uiClass);
}

pattern listViewForUIClass(uiClass : UIClass, view : UIListView) {
	UIClass(uiClass);
	UIClass.listView(uiClass, view);
}

pattern classViewForUIClass(uiClass : UIClass, view : UIClassView) {
	UIClass(uiClass);
	UIClass.classView(uiClass, view);
}


//JClass Queries
pattern JClassQuery(jClass : JClass) {
	JClass(jClass);
}

pattern JClassWithGuardConditionQuery(jClass : JClass, uiModule : UIModule) {
	JClass.^package(jClass, jPackage);
	find findUIRelevantPackages(jPackage);
	neg find alreadyTransformed(jClass, _, _);
	PSMToUITrace.psmElements(trace, jPackage);
	PSMToUITrace.uiElements(trace, uiModule);
}

pattern JClassWithGuardConditionQueryForModify(jClass : JClass, uiClass : UIClass, uiModule : UIModule, trace : PSMToUITrace) {
	JClass.^package(jClass, jPackage);
	find findUIRelevantPackages(jPackage);
	find alreadyTransformed(jClass, uiClass, trace);
	PSMToUITrace.psmElements(trace, jPackage);
	PSMToUITrace.uiElements(trace, uiModule);
}

pattern attributeGroupQuery(jClass : JClass, group : JUIAttributeGroup, attribute : JAttribute) {
	JClass.attributeOrder(jClass, group);
	JUIAttributeGroup.attributes(group, attribute);
}

pattern representsUserJClassQuery(jClass : JClass) {
	JClass.representsUser(jClass, true);
}

//UIAction Queries
pattern resultViewForUIAction(action : UIAction, view : UIResultView) {
	UIAction(action);
	UIAction.resultView(action, view);
}

pattern paramViewForUIAction(action : UIAction, view : UIParamView) {
	UIAction(action);
	UIAction.paramView(action, view);
}

//JOperation Queries
pattern JOperationWithGuardQuery(jOperation : JOperation, uiClass : UIClass) {
	JOperation(jOperation);
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	JOperation.ownerClass(jOperation, jClass);
	PSMToUITrace.psmElements(trace, jClass);
	PSMToUITrace.uiElements(trace, uiClass);
	neg find alreadyTransformed(jOperation, _, _);
}

pattern JOperationWithGuardQueryForModify(jOperation : JOperation, uiAction : UIAction, uiClass : UIClass, trace : PSMToUITrace) {
	JOperation(jOperation);
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	JOperation.ownerClass(jOperation, jClass);
	PSMToUITrace.psmElements(trace, jClass);
	PSMToUITrace.uiElements(trace, uiClass);
	find alreadyTransformed(jOperation, uiAction, trace);
}

//JParameter Queries
pattern JParameterWithGuardQuery(jParameter : JParameter) {
	JParameter(jParameter);
	JOperation.parameters(jOperation, jParameter);
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	neg find alreadyTransformed(jParameter, _, _);
}

pattern resultJParameter(jOperation : JOperation, jParameter : JParameter) {
	JOperation.parameters(jOperation, jParameter);
	JParameter.input(jParameter, false);
}

//UIMenuItem Queries
pattern mainMenuQuery(menuItem : UIMenuItem) {
	UIMenuItem.uuid(menuItem, "main_menu");
}

//JUIMenuItem Queries
pattern findMenuItemForFilter(jFilter : JUIFilter, jMenuItem : JUIMenuItem) {
	JUIMenuItem.uifilters(jMenuItem, jFilter);
}

pattern findMenuItemWithParent(jMenuItem : JUIMenuItem) {
	JUIMenuItem.parent(jMenuItem, _);
	neg find alreadyTransformed(jMenuItem, _, _);
}

pattern menuRootChildren(menuItem : JUIMenuItem) {
	JModel.rootMenuItems(_JModel, Root);
	JUIMenuItem.children(Root, menuItem);
}

//JRole Queries
pattern JRoleQuery(jRole : JRole) {
	JRole(jRole);
	neg find alreadyTransformed(jRole, _, _);
}

//JAttribute Queries
pattern JAttributeQuery(jAttribute : JAttribute) {
	JAttribute(jAttribute);
	neg find alreadyTransformed(jAttribute, _, _);
}

//Trace Queries
pattern psmToUiTrace(jElement : JElement, identifiable : Identifiable) {
	PSMToUITrace.psmElements(trace, jElement);
	PSMToUITrace.uiElements(trace, identifiable);
}

pattern alreadyTransformed(jElement : JElement, identifiable : Identifiable, trace : PSMToUITrace) {
	PSMToUITrace.psmElements(trace, jElement);
	PSMToUITrace.uiElements(trace, identifiable);
	Identifiable.uuid(identifiable, _);
}

//PSMToUIMapping Queries
pattern findCorrespondingType(jPrimitive : JPrimitive, componentType : UIBaseComponentType) {
	Mapping.componentType(mapping, componentType);
	Mapping.psmType(mapping, jPrimitive);
}



