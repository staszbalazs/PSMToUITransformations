package queries

import "platform:/resource/psm_meta/src/model/psm.ecore"
import "platform:/resource/ui_meta/src/model/ui.ecore"
import "platform:/resource/ui_meta/src/model/psmToUiTypeMapping.ecore"
import "platform:/resource/traceability_meta/model/traceability.ecore"


//JModel Queries
pattern domainJModelQuery(jModel : JModel) {
	JModel.framework(jModel, false);
	neg find alreadyTransformed(jModel, _, _);
}

pattern domainJModelQueryForModify(jModel : JModel) {
	find alreadyTransformed(jModel, _, _);
}

//JInfo Queries
pattern JInfoQuery(jInfo : JInfo, uuid : java String) {
	JInfo(jInfo);
	JClass.representsUser(jClass, true);
	JClass.uuid(jClass, uuid);
	neg find alreadyTransformed(jInfo, _, _);
}

pattern JInfoQueryForModify(jInfo : JInfo, uiInfo : UIInfo, trace : PSMToUITrace) {
	find alreadyTransformed(jInfo, uiInfo, trace);
}

//JUIFilter Queries
pattern JUIFilterQuery(jFilter : JUIFilter, uiMenuItem : UIMenuItem, componentType : UIBaseComponentType) {
	JUIMenuItem.uifilters(jMenuItem, jFilter);
	PSMToUITrace.psmElements(menuTrace, jMenuItem);
	PSMToUITrace.uiElements(menuTrace, uiMenuItem);
	
	JUIFilter.attribute(jFilter, attribute);
	PSMToUITrace.psmElements(componentTrace, attribute);
	PSMToUITrace.uiElements(componentTrace, componentType);
	
	JUIFilter.uuid(jFilter, _);
	JUIFilter.operator(jFilter, _);
	JUIFilter.value(jFilter, _);
	
	neg find alreadyTransformed(jFilter, _, _);	
}

pattern JUIFilterQueryForModify(jFilter : JUIFilter, uiFilter : UIFilter, uiMenuItem : UIMenuItem, componentType : UIBaseComponentType, trace : PSMToUITrace) {
	JUIMenuItem.uifilters(jMenuItem, jFilter);
	PSMToUITrace.psmElements(menuTrace, jMenuItem);
	PSMToUITrace.uiElements(menuTrace, uiMenuItem);
	
	JUIFilter.attribute(jFilter, attribute);
	PSMToUITrace.psmElements(componentTrace, attribute);
	PSMToUITrace.uiElements(componentTrace, componentType);
	
	find alreadyTransformed(jFilter, uiFilter, trace);
}

//JPackage Queries
pattern JPackageToUIModuleQuery(jPackage : JPackage) {
	find notOnlyContainerPackage(jPackage);
	find findUIRelevantPackages(jPackage);
	JPackage.uuid(jPackage, _);	
	JPackage.name(jPackage, _);	
	neg find alreadyTransformed(jPackage, _, _);
}

pattern JPackageToUIModuleQueryForModify(jPackage : JPackage, uiModule : UIModule, trace : PSMToUITrace) {
	PSMToUITrace.psmElements(trace, jPackage);
	PSMToUITrace.uiElements(trace, uiModule);
}

private pattern findUIRelevantPackages(jPackage : JPackage) {
	find findPackagesInLayer(jPackage, JLayer::SCREEN);
} or {
	find findPackagesInLayer(jPackage, JLayer::OPERATION);
} or {
	find findPackagesInLayer(jPackage, JLayer::ALL);
}

private pattern findPackagesInLayer(jPackage : JPackage, layer : JLayer) {
	JPackage.participates(jPackage, layer);
}

private pattern notOnlyContainerPackage(jPackage : JPackage) {
	primitives == count JPackage.primitives(jPackage, _);
	enumerations == count JPackage.enumerations(jPackage, _);
	relationships == count JPackage.relationships(jPackage, _);
	classes == count JPackage.classes(jPackage, _);
	check (
		enumerations + primitives + relationships + classes > 0
	);
}

//UIClass Queries
pattern findDescendantsForClass(uiClass : UIClass, descendant : UIClass) {
	UIClass.^super+(descendant, uiClass);
}


//JClass Queries
pattern JClassWithGuardConditionQuery(jClass : JClass, uiModule : UIModule) {
	JClass.^package(jClass, jPackage);
	find findUIRelevantPackages(jPackage);
	neg find alreadyTransformed(jClass, _, _);
	PSMToUITrace.psmElements(trace, jPackage);
	PSMToUITrace.uiElements(trace, uiModule);
}

pattern JClassWithGuardConditionQueryForModify(jClass : JClass, uiClass : UIClass, uiModule : UIModule, trace : PSMToUITrace) {
	JClass.^package(jClass, jPackage);
	find findUIRelevantPackages(jPackage);
	find alreadyTransformed(jClass, uiClass, trace);
	PSMToUITrace.psmElements(trace, jPackage);
	PSMToUITrace.uiElements(trace, uiModule);
}

pattern representsUserJClassQuery(jClass : JClass) {
	JClass.representsUser(jClass, true);
}


//JOperation Queries
pattern JOperationWithGuardQuery(jOperation : JOperation, uiClass : UIClass) {
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	JOperation.ownerClass(jOperation, jClass);
	PSMToUITrace.psmElements(trace, jClass);
	PSMToUITrace.uiElements(trace, uiClass);
	neg find alreadyTransformed(jOperation, _, _);
}

pattern JOperationWithGuardQueryForModify(jOperation : JOperation, uiAction : UIAction, uiClass : UIClass, trace : PSMToUITrace) {
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	JOperation.ownerClass(jOperation, jClass);
	PSMToUITrace.psmElements(classTrace, jClass);
	PSMToUITrace.uiElements(classTrace, uiClass);
	find alreadyTransformed(jOperation, uiAction, trace);
}

//JParameter Queries
pattern JParameterWithGuardQuery(jParameter : JParameter, uiAction : UIAction, uiType : Identifiable) {
	JOperation.parameters(jOperation, jParameter);
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	PSMToUITrace.psmElements(trace, jOperation);
	PSMToUITrace.uiElements(trace, uiAction);
	JParameter.type(jParameter, type);
	PSMToUITrace.psmElements(typeTrace, type);
	PSMToUITrace.uiElements(typeTrace, uiType);
	neg find alreadyTransformed(jParameter, _, _);
}

pattern JParameterWithGuardQueryForModify(jParameter : JParameter, parameterType : UIParameterComponentType, uiAction : UIAction, trace : PSMToUITrace, uiType : Identifiable) {
	JOperation.parameters(jOperation, jParameter);
	JOperation.visibility(jOperation, JVisibility::PUBLIC);
	PSMToUITrace.psmElements(opTrace, jOperation);
	PSMToUITrace.uiElements(opTrace, uiAction);
	find alreadyTransformed(jParameter, parameterType, trace);
	JParameter.type(jParameter, type);
	PSMToUITrace.psmElements(typeTrace, type);
	PSMToUITrace.uiElements(typeTrace, uiType);
}

pattern JParameterViewFieldQuery(jParameter : JParameter, viewField : UIViewField, viewFieldSet : UIViewFieldSet) {
	find alreadyTransformed(jParameter, parameterType, _);
	UIViewField.componentType(viewField, parameterType);
	UIViewFieldSet.viewFields(viewFieldSet, viewField);
}

//JUIMenuItem Queries
pattern findMenuItemWithParent(jMenuItem : JUIMenuItem) {
	JUIMenuItem.parent(jMenuItem, _);
	neg find alreadyTransformed(jMenuItem, _, _);
}

pattern findMenuItemWithParentForModify(jMenuItem : JUIMenuItem, uiMenuItem : UIMenuItem, trace : PSMToUITrace) {
	JUIMenuItem.parent(jMenuItem, _);
	find alreadyTransformed(jMenuItem, uiMenuItem, trace);
}

pattern menuRootChildren(menuItem : JUIMenuItem) {
	JModel.rootMenuItems(_, Root);
	JUIMenuItem.children(Root, menuItem);
}

//JRole Queries
pattern JRoleQuery(jRole : JRole, opposite : JRole, uiClass : UIClass) {
	JRelationship.roles(relation, jRole);
	JRelationship.roles(relation, opposite);
	jRole != opposite;
	neg find alreadyTransformed(jRole, _, _);
	JRole.ownerClass(jRole, jClass);
	PSMToUITrace.psmElements(trace, jClass);
	PSMToUITrace.uiElements(trace, uiClass);
}

pattern JRoleQueryForModify(jRole : JRole, referenceComponentType : UIReferenceComponentType, oppositeReferenceType : UIReferenceComponentType, trace : PSMToUITrace) {
	find alreadyTransformed(jRole, referenceComponentType, trace);
	
	JRelationship.roles(relation, jRole);
	JRelationship.roles(relation, opposite);
	jRole != opposite;
	
	PSMToUITrace.psmElements(trace2, opposite);
	PSMToUITrace.uiElements(trace2, oppositeReferenceType);
}

//JAttribute Queries
pattern JAttributeQuery(jAttribute : JAttribute) {
	JAttribute(jAttribute);
	neg find alreadyTransformed(jAttribute, _, _);
}

//Trace Queries
pattern psmToUiTrace(jElement : JElement, identifiable : Identifiable) {
	PSMToUITrace.psmElements(trace, jElement);
	PSMToUITrace.uiElements(trace, identifiable);
}

pattern alreadyTransformed(jElement : JElement, identifiable : Identifiable, trace : PSMToUITrace) {
	PSMToUITrace.psmElements(trace, jElement);
	PSMToUITrace.uiElements(trace, identifiable);
	Identifiable.uuid(identifiable, _);
}

//PSMToUIMapping Queries
pattern findCorrespondingType(jPrimitive : JPrimitive, componentType : UIBaseComponentType) {
	Mapping.componentType(mapping, componentType);
	Mapping.psmType(mapping, jPrimitive);
}



